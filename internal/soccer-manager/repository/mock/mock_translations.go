// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/repository (interfaces: TeamTranslationsRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_translations.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/repository TeamTranslationsRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/hexley21/soccer-manager/internal/soccer-manager/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamTranslationsRepository is a mock of TeamTranslationsRepository interface.
type MockTeamTranslationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamTranslationsRepositoryMockRecorder
	isgomock struct{}
}

// MockTeamTranslationsRepositoryMockRecorder is the mock recorder for MockTeamTranslationsRepository.
type MockTeamTranslationsRepositoryMockRecorder struct {
	mock *MockTeamTranslationsRepository
}

// NewMockTeamTranslationsRepository creates a new mock instance.
func NewMockTeamTranslationsRepository(ctrl *gomock.Controller) *MockTeamTranslationsRepository {
	mock := &MockTeamTranslationsRepository{ctrl: ctrl}
	mock.recorder = &MockTeamTranslationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamTranslationsRepository) EXPECT() *MockTeamTranslationsRepositoryMockRecorder {
	return m.recorder
}

// DeleteTranslationByUserID mocks base method.
func (m *MockTeamTranslationsRepository) DeleteTranslationByUserID(ctx context.Context, arg repository.DeleteTranslationByUserIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTranslationByUserID", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTranslationByUserID indicates an expected call of DeleteTranslationByUserID.
func (mr *MockTeamTranslationsRepositoryMockRecorder) DeleteTranslationByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTranslationByUserID", reflect.TypeOf((*MockTeamTranslationsRepository)(nil).DeleteTranslationByUserID), ctx, arg)
}

// GetTranslatedTeamWithId mocks base method.
func (m *MockTeamTranslationsRepository) GetTranslatedTeamWithId(ctx context.Context, arg repository.GetTranslatedTeamWithIdParams) (repository.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslatedTeamWithId", ctx, arg)
	ret0, _ := ret[0].(repository.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslatedTeamWithId indicates an expected call of GetTranslatedTeamWithId.
func (mr *MockTeamTranslationsRepositoryMockRecorder) GetTranslatedTeamWithId(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslatedTeamWithId", reflect.TypeOf((*MockTeamTranslationsRepository)(nil).GetTranslatedTeamWithId), ctx, arg)
}

// GetTranslatedTeamWithUserId mocks base method.
func (m *MockTeamTranslationsRepository) GetTranslatedTeamWithUserId(ctx context.Context, arg repository.GetTranslatedTeamWithUserIdParams) (repository.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslatedTeamWithUserId", ctx, arg)
	ret0, _ := ret[0].(repository.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslatedTeamWithUserId indicates an expected call of GetTranslatedTeamWithUserId.
func (mr *MockTeamTranslationsRepositoryMockRecorder) GetTranslatedTeamWithUserId(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslatedTeamWithUserId", reflect.TypeOf((*MockTeamTranslationsRepository)(nil).GetTranslatedTeamWithUserId), ctx, arg)
}

// GetTranslationsByUserID mocks base method.
func (m *MockTeamTranslationsRepository) GetTranslationsByUserID(ctx context.Context, userID int64) ([]repository.TeamTranslation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslationsByUserID", ctx, userID)
	ret0, _ := ret[0].([]repository.TeamTranslation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslationsByUserID indicates an expected call of GetTranslationsByUserID.
func (mr *MockTeamTranslationsRepositoryMockRecorder) GetTranslationsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslationsByUserID", reflect.TypeOf((*MockTeamTranslationsRepository)(nil).GetTranslationsByUserID), ctx, userID)
}

// InsertTranslationByUserID mocks base method.
func (m *MockTeamTranslationsRepository) InsertTranslationByUserID(ctx context.Context, arg repository.InsertTranslationByUserIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTranslationByUserID", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTranslationByUserID indicates an expected call of InsertTranslationByUserID.
func (mr *MockTeamTranslationsRepositoryMockRecorder) InsertTranslationByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTranslationByUserID", reflect.TypeOf((*MockTeamTranslationsRepository)(nil).InsertTranslationByUserID), ctx, arg)
}

// ListLocalesByTeamID mocks base method.
func (m *MockTeamTranslationsRepository) ListLocalesByTeamID(ctx context.Context, teamID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocalesByTeamID", ctx, teamID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocalesByTeamID indicates an expected call of ListLocalesByTeamID.
func (mr *MockTeamTranslationsRepositoryMockRecorder) ListLocalesByTeamID(ctx, teamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocalesByTeamID", reflect.TypeOf((*MockTeamTranslationsRepository)(nil).ListLocalesByTeamID), ctx, teamID)
}

// ListTranslatedTeamsCursor mocks base method.
func (m *MockTeamTranslationsRepository) ListTranslatedTeamsCursor(ctx context.Context, arg repository.ListTranslatedTeamsCursorParams) ([]repository.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTranslatedTeamsCursor", ctx, arg)
	ret0, _ := ret[0].([]repository.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTranslatedTeamsCursor indicates an expected call of ListTranslatedTeamsCursor.
func (mr *MockTeamTranslationsRepositoryMockRecorder) ListTranslatedTeamsCursor(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTranslatedTeamsCursor", reflect.TypeOf((*MockTeamTranslationsRepository)(nil).ListTranslatedTeamsCursor), ctx, arg)
}

// UpdateTranslationNameByUserID mocks base method.
func (m *MockTeamTranslationsRepository) UpdateTranslationNameByUserID(ctx context.Context, arg repository.UpdateTranslationNameByUserIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTranslationNameByUserID", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTranslationNameByUserID indicates an expected call of UpdateTranslationNameByUserID.
func (mr *MockTeamTranslationsRepositoryMockRecorder) UpdateTranslationNameByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTranslationNameByUserID", reflect.TypeOf((*MockTeamTranslationsRepository)(nil).UpdateTranslationNameByUserID), ctx, arg)
}
