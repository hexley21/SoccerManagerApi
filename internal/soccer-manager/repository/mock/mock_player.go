// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/repository (interfaces: PlayerRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_player.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/repository PlayerRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/hexley21/soccer-manager/internal/soccer-manager/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockPlayerRepository is a mock of PlayerRepository interface.
type MockPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryMockRecorder
	isgomock struct{}
}

// MockPlayerRepositoryMockRecorder is the mock recorder for MockPlayerRepository.
type MockPlayerRepositoryMockRecorder struct {
	mock *MockPlayerRepository
}

// NewMockPlayerRepository creates a new mock instance.
func NewMockPlayerRepository(ctrl *gomock.Controller) *MockPlayerRepository {
	mock := &MockPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepository) EXPECT() *MockPlayerRepositoryMockRecorder {
	return m.recorder
}

// GetPlayerByID mocks base method.
func (m *MockPlayerRepository) GetPlayerByID(ctx context.Context, id int64) (repository.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByID", ctx, id)
	ret0, _ := ret[0].(repository.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByID indicates an expected call of GetPlayerByID.
func (mr *MockPlayerRepositoryMockRecorder) GetPlayerByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByID", reflect.TypeOf((*MockPlayerRepository)(nil).GetPlayerByID), ctx, id)
}

// InsertPlayer mocks base method.
func (m *MockPlayerRepository) InsertPlayer(ctx context.Context, arg repository.InsertPlayerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPlayer", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPlayer indicates an expected call of InsertPlayer.
func (mr *MockPlayerRepositoryMockRecorder) InsertPlayer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPlayer", reflect.TypeOf((*MockPlayerRepository)(nil).InsertPlayer), ctx, arg)
}

// InsertPlayersBatch mocks base method.
func (m *MockPlayerRepository) InsertPlayersBatch(ctx context.Context, args []repository.InsertPlayerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPlayersBatch", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPlayersBatch indicates an expected call of InsertPlayersBatch.
func (mr *MockPlayerRepositoryMockRecorder) InsertPlayersBatch(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPlayersBatch", reflect.TypeOf((*MockPlayerRepository)(nil).InsertPlayersBatch), ctx, args)
}

// ListPlayersByCursor mocks base method.
func (m *MockPlayerRepository) ListPlayersByCursor(ctx context.Context, arg repository.ListPlayersByCursorParams) ([]repository.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlayersByCursor", ctx, arg)
	ret0, _ := ret[0].([]repository.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlayersByCursor indicates an expected call of ListPlayersByCursor.
func (mr *MockPlayerRepositoryMockRecorder) ListPlayersByCursor(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlayersByCursor", reflect.TypeOf((*MockPlayerRepository)(nil).ListPlayersByCursor), ctx, arg)
}

// ListPlayersByTeamID mocks base method.
func (m *MockPlayerRepository) ListPlayersByTeamID(ctx context.Context, arg repository.ListPlayersByTeamIDParams) ([]repository.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlayersByTeamID", ctx, arg)
	ret0, _ := ret[0].([]repository.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlayersByTeamID indicates an expected call of ListPlayersByTeamID.
func (mr *MockPlayerRepositoryMockRecorder) ListPlayersByTeamID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlayersByTeamID", reflect.TypeOf((*MockPlayerRepository)(nil).ListPlayersByTeamID), ctx, arg)
}

// ListPlayersByUserID mocks base method.
func (m *MockPlayerRepository) ListPlayersByUserID(ctx context.Context, arg repository.ListPlayersByUserIDParams) ([]repository.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlayersByUserID", ctx, arg)
	ret0, _ := ret[0].([]repository.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlayersByUserID indicates an expected call of ListPlayersByUserID.
func (mr *MockPlayerRepositoryMockRecorder) ListPlayersByUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlayersByUserID", reflect.TypeOf((*MockPlayerRepository)(nil).ListPlayersByUserID), ctx, arg)
}

// UpdatePlayerNameAndCountry mocks base method.
func (m *MockPlayerRepository) UpdatePlayerNameAndCountry(ctx context.Context, arg repository.UpdatePlayerNameAndCountryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayerNameAndCountry", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayerNameAndCountry indicates an expected call of UpdatePlayerNameAndCountry.
func (mr *MockPlayerRepositoryMockRecorder) UpdatePlayerNameAndCountry(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayerNameAndCountry", reflect.TypeOf((*MockPlayerRepository)(nil).UpdatePlayerNameAndCountry), ctx, arg)
}

// UpdatePlayerPriceAndTeam mocks base method.
func (m *MockPlayerRepository) UpdatePlayerPriceAndTeam(ctx context.Context, arg repository.UpdatePlayerPriceAndTeamParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayerPriceAndTeam", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayerPriceAndTeam indicates an expected call of UpdatePlayerPriceAndTeam.
func (mr *MockPlayerRepositoryMockRecorder) UpdatePlayerPriceAndTeam(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayerPriceAndTeam", reflect.TypeOf((*MockPlayerRepository)(nil).UpdatePlayerPriceAndTeam), ctx, arg)
}
