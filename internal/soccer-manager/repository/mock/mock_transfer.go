// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/repository (interfaces: TransferRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_transfer.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/repository TransferRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/hexley21/soccer-manager/internal/soccer-manager/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockTransferRepository is a mock of TransferRepository interface.
type MockTransferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRepositoryMockRecorder
	isgomock struct{}
}

// MockTransferRepositoryMockRecorder is the mock recorder for MockTransferRepository.
type MockTransferRepositoryMockRecorder struct {
	mock *MockTransferRepository
}

// NewMockTransferRepository creates a new mock instance.
func NewMockTransferRepository(ctrl *gomock.Controller) *MockTransferRepository {
	mock := &MockTransferRepository{ctrl: ctrl}
	mock.recorder = &MockTransferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRepository) EXPECT() *MockTransferRepositoryMockRecorder {
	return m.recorder
}

// BuyPlayer mocks base method.
func (m *MockTransferRepository) BuyPlayer(ctx context.Context, transferId, buyerTeamId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyPlayer", ctx, transferId, buyerTeamId)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyPlayer indicates an expected call of BuyPlayer.
func (mr *MockTransferRepositoryMockRecorder) BuyPlayer(ctx, transferId, buyerTeamId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyPlayer", reflect.TypeOf((*MockTransferRepository)(nil).BuyPlayer), ctx, transferId, buyerTeamId)
}

// DeleteTransferByIDAndUserID mocks base method.
func (m *MockTransferRepository) DeleteTransferByIDAndUserID(ctx context.Context, arg repository.DeleteTransferByIDAndUserIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransferByIDAndUserID", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransferByIDAndUserID indicates an expected call of DeleteTransferByIDAndUserID.
func (mr *MockTransferRepositoryMockRecorder) DeleteTransferByIDAndUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransferByIDAndUserID", reflect.TypeOf((*MockTransferRepository)(nil).DeleteTransferByIDAndUserID), ctx, arg)
}

// GetTransferByPlayerID mocks base method.
func (m *MockTransferRepository) GetTransferByPlayerID(ctx context.Context, playerID int64) (repository.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferByPlayerID", ctx, playerID)
	ret0, _ := ret[0].(repository.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferByPlayerID indicates an expected call of GetTransferByPlayerID.
func (mr *MockTransferRepositoryMockRecorder) GetTransferByPlayerID(ctx, playerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferByPlayerID", reflect.TypeOf((*MockTransferRepository)(nil).GetTransferByPlayerID), ctx, playerID)
}

// InsertTransferRecordByUser mocks base method.
func (m *MockTransferRepository) InsertTransferRecordByUser(ctx context.Context, arg repository.InsertTransferRecordByUserParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransferRecordByUser", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransferRecordByUser indicates an expected call of InsertTransferRecordByUser.
func (mr *MockTransferRepositoryMockRecorder) InsertTransferRecordByUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransferRecordByUser", reflect.TypeOf((*MockTransferRepository)(nil).InsertTransferRecordByUser), ctx, arg)
}

// ListTransfers mocks base method.
func (m *MockTransferRepository) ListTransfers(ctx context.Context, arg repository.ListTransfersParams) ([]repository.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", ctx, arg)
	ret0, _ := ret[0].([]repository.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockTransferRepositoryMockRecorder) ListTransfers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockTransferRepository)(nil).ListTransfers), ctx, arg)
}

// ListTransfersByTeamId mocks base method.
func (m *MockTransferRepository) ListTransfersByTeamId(ctx context.Context, arg repository.ListTransfersByTeamIdParams) ([]repository.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfersByTeamId", ctx, arg)
	ret0, _ := ret[0].([]repository.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfersByTeamId indicates an expected call of ListTransfersByTeamId.
func (mr *MockTransferRepositoryMockRecorder) ListTransfersByTeamId(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfersByTeamId", reflect.TypeOf((*MockTransferRepository)(nil).ListTransfersByTeamId), ctx, arg)
}

// SelectTransferById mocks base method.
func (m *MockTransferRepository) SelectTransferById(ctx context.Context, id int64) (repository.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTransferById", ctx, id)
	ret0, _ := ret[0].(repository.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTransferById indicates an expected call of SelectTransferById.
func (mr *MockTransferRepositoryMockRecorder) SelectTransferById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTransferById", reflect.TypeOf((*MockTransferRepository)(nil).SelectTransferById), ctx, id)
}

// UpdateTransferPriceByIDAndUserID mocks base method.
func (m *MockTransferRepository) UpdateTransferPriceByIDAndUserID(ctx context.Context, arg repository.UpdateTransferPriceByIDAndUserIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransferPriceByIDAndUserID", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransferPriceByIDAndUserID indicates an expected call of UpdateTransferPriceByIDAndUserID.
func (mr *MockTransferRepositoryMockRecorder) UpdateTransferPriceByIDAndUserID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransferPriceByIDAndUserID", reflect.TypeOf((*MockTransferRepository)(nil).UpdateTransferPriceByIDAndUserID), ctx, arg)
}
