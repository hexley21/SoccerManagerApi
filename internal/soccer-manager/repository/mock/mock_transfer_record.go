// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/repository (interfaces: TransferRecordRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_transfer_record.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/repository TransferRecordRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/hexley21/soccer-manager/internal/soccer-manager/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockTransferRecordRepository is a mock of TransferRecordRepository interface.
type MockTransferRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRecordRepositoryMockRecorder
	isgomock struct{}
}

// MockTransferRecordRepositoryMockRecorder is the mock recorder for MockTransferRecordRepository.
type MockTransferRecordRepositoryMockRecorder struct {
	mock *MockTransferRecordRepository
}

// NewMockTransferRecordRepository creates a new mock instance.
func NewMockTransferRecordRepository(ctrl *gomock.Controller) *MockTransferRecordRepository {
	mock := &MockTransferRecordRepository{ctrl: ctrl}
	mock.recorder = &MockTransferRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRecordRepository) EXPECT() *MockTransferRecordRepositoryMockRecorder {
	return m.recorder
}

// GetTransferRecordByID mocks base method.
func (m *MockTransferRecordRepository) GetTransferRecordByID(ctx context.Context, id int64) (repository.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferRecordByID", ctx, id)
	ret0, _ := ret[0].(repository.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferRecordByID indicates an expected call of GetTransferRecordByID.
func (mr *MockTransferRecordRepositoryMockRecorder) GetTransferRecordByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferRecordByID", reflect.TypeOf((*MockTransferRecordRepository)(nil).GetTransferRecordByID), ctx, id)
}

// ListTransferRecords mocks base method.
func (m *MockTransferRecordRepository) ListTransferRecords(ctx context.Context, arg repository.ListTransferRecordsParams) ([]repository.TransferRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransferRecords", ctx, arg)
	ret0, _ := ret[0].([]repository.TransferRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransferRecords indicates an expected call of ListTransferRecords.
func (mr *MockTransferRecordRepositoryMockRecorder) ListTransferRecords(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransferRecords", reflect.TypeOf((*MockTransferRecordRepository)(nil).ListTransferRecords), ctx, arg)
}
