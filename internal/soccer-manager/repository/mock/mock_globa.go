// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/repository (interfaces: GlobeRepo)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_globa.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/repository GlobeRepo
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/hexley21/soccer-manager/internal/soccer-manager/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockGlobeRepo is a mock of GlobeRepo interface.
type MockGlobeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGlobeRepoMockRecorder
	isgomock struct{}
}

// MockGlobeRepoMockRecorder is the mock recorder for MockGlobeRepo.
type MockGlobeRepoMockRecorder struct {
	mock *MockGlobeRepo
}

// NewMockGlobeRepo creates a new mock instance.
func NewMockGlobeRepo(ctrl *gomock.Controller) *MockGlobeRepo {
	mock := &MockGlobeRepo{ctrl: ctrl}
	mock.recorder = &MockGlobeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobeRepo) EXPECT() *MockGlobeRepoMockRecorder {
	return m.recorder
}

// GetAllCountries mocks base method.
func (m *MockGlobeRepo) GetAllCountries(ctx context.Context) ([]repository.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCountries", ctx)
	ret0, _ := ret[0].([]repository.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCountries indicates an expected call of GetAllCountries.
func (mr *MockGlobeRepoMockRecorder) GetAllCountries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCountries", reflect.TypeOf((*MockGlobeRepo)(nil).GetAllCountries), ctx)
}

// GetAllLocales mocks base method.
func (m *MockGlobeRepo) GetAllLocales(ctx context.Context) ([]repository.Locale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLocales", ctx)
	ret0, _ := ret[0].([]repository.Locale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLocales indicates an expected call of GetAllLocales.
func (mr *MockGlobeRepoMockRecorder) GetAllLocales(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLocales", reflect.TypeOf((*MockGlobeRepo)(nil).GetAllLocales), ctx)
}
