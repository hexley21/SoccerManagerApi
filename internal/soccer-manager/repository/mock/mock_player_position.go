// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/repository (interfaces: PlayerPositionRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_player_position.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/repository PlayerPositionRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/hexley21/soccer-manager/internal/soccer-manager/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockPlayerPositionRepository is a mock of PlayerPositionRepository interface.
type MockPlayerPositionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerPositionRepositoryMockRecorder
	isgomock struct{}
}

// MockPlayerPositionRepositoryMockRecorder is the mock recorder for MockPlayerPositionRepository.
type MockPlayerPositionRepositoryMockRecorder struct {
	mock *MockPlayerPositionRepository
}

// NewMockPlayerPositionRepository creates a new mock instance.
func NewMockPlayerPositionRepository(ctrl *gomock.Controller) *MockPlayerPositionRepository {
	mock := &MockPlayerPositionRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerPositionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerPositionRepository) EXPECT() *MockPlayerPositionRepositoryMockRecorder {
	return m.recorder
}

// DeletePositionTranslation mocks base method.
func (m *MockPlayerPositionRepository) DeletePositionTranslation(ctx context.Context, arg repository.DeletePositionTranslationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePositionTranslation", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePositionTranslation indicates an expected call of DeletePositionTranslation.
func (mr *MockPlayerPositionRepositoryMockRecorder) DeletePositionTranslation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePositionTranslation", reflect.TypeOf((*MockPlayerPositionRepository)(nil).DeletePositionTranslation), ctx, arg)
}

// GetAllPositionCodes mocks base method.
func (m *MockPlayerPositionRepository) GetAllPositionCodes(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPositionCodes", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPositionCodes indicates an expected call of GetAllPositionCodes.
func (mr *MockPlayerPositionRepositoryMockRecorder) GetAllPositionCodes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPositionCodes", reflect.TypeOf((*MockPlayerPositionRepository)(nil).GetAllPositionCodes), ctx)
}

// GetAllPositions mocks base method.
func (m *MockPlayerPositionRepository) GetAllPositions(ctx context.Context) ([]repository.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPositions", ctx)
	ret0, _ := ret[0].([]repository.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPositions indicates an expected call of GetAllPositions.
func (mr *MockPlayerPositionRepositoryMockRecorder) GetAllPositions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPositions", reflect.TypeOf((*MockPlayerPositionRepository)(nil).GetAllPositions), ctx)
}

// GetPositionTranslations mocks base method.
func (m *MockPlayerPositionRepository) GetPositionTranslations(ctx context.Context) ([]repository.PositionTranslation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositionTranslations", ctx)
	ret0, _ := ret[0].([]repository.PositionTranslation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositionTranslations indicates an expected call of GetPositionTranslations.
func (mr *MockPlayerPositionRepositoryMockRecorder) GetPositionTranslations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionTranslations", reflect.TypeOf((*MockPlayerPositionRepository)(nil).GetPositionTranslations), ctx)
}

// GetPositionTranslationsByLocale mocks base method.
func (m *MockPlayerPositionRepository) GetPositionTranslationsByLocale(ctx context.Context, locale string) ([]repository.PositionTranslation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositionTranslationsByLocale", ctx, locale)
	ret0, _ := ret[0].([]repository.PositionTranslation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositionTranslationsByLocale indicates an expected call of GetPositionTranslationsByLocale.
func (mr *MockPlayerPositionRepositoryMockRecorder) GetPositionTranslationsByLocale(ctx, locale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionTranslationsByLocale", reflect.TypeOf((*MockPlayerPositionRepository)(nil).GetPositionTranslationsByLocale), ctx, locale)
}

// GetPositionTranslationsByPositionCode mocks base method.
func (m *MockPlayerPositionRepository) GetPositionTranslationsByPositionCode(ctx context.Context, positionCode string) ([]repository.PositionTranslation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositionTranslationsByPositionCode", ctx, positionCode)
	ret0, _ := ret[0].([]repository.PositionTranslation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositionTranslationsByPositionCode indicates an expected call of GetPositionTranslationsByPositionCode.
func (mr *MockPlayerPositionRepositoryMockRecorder) GetPositionTranslationsByPositionCode(ctx, positionCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionTranslationsByPositionCode", reflect.TypeOf((*MockPlayerPositionRepository)(nil).GetPositionTranslationsByPositionCode), ctx, positionCode)
}

// InsertPositionTranslation mocks base method.
func (m *MockPlayerPositionRepository) InsertPositionTranslation(ctx context.Context, arg repository.InsertPositionTranslationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPositionTranslation", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPositionTranslation indicates an expected call of InsertPositionTranslation.
func (mr *MockPlayerPositionRepositoryMockRecorder) InsertPositionTranslation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPositionTranslation", reflect.TypeOf((*MockPlayerPositionRepository)(nil).InsertPositionTranslation), ctx, arg)
}

// UpdatePositionTranslationLabel mocks base method.
func (m *MockPlayerPositionRepository) UpdatePositionTranslationLabel(ctx context.Context, arg repository.UpdatePositionTranslationLabelParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePositionTranslationLabel", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePositionTranslationLabel indicates an expected call of UpdatePositionTranslationLabel.
func (mr *MockPlayerPositionRepositoryMockRecorder) UpdatePositionTranslationLabel(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePositionTranslationLabel", reflect.TypeOf((*MockPlayerPositionRepository)(nil).UpdatePositionTranslationLabel), ctx, arg)
}
