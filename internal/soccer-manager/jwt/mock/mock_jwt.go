// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/jwt (interfaces: Manager,ManagerWithTTL)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_jwt.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/jwt Manager,ManagerWithTTL
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder[T]
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder[T any] struct {
	mock *MockManager[T]
}

// NewMockManager creates a new mock instance.
func NewMockManager[T any](ctrl *gomock.Controller) *MockManager[T] {
	mock := &MockManager[T]{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager[T]) EXPECT() *MockManagerMockRecorder[T] {
	return m.recorder
}

// CreateTokenString mocks base method.
func (m *MockManager[T]) CreateTokenString(data T) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokenString", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTokenString indicates an expected call of CreateTokenString.
func (mr *MockManagerMockRecorder[T]) CreateTokenString(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenString", reflect.TypeOf((*MockManager[T])(nil).CreateTokenString), data)
}

// ParseTokenString mocks base method.
func (m *MockManager[T]) ParseTokenString(token string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTokenString", token)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTokenString indicates an expected call of ParseTokenString.
func (mr *MockManagerMockRecorder[T]) ParseTokenString(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTokenString", reflect.TypeOf((*MockManager[T])(nil).ParseTokenString), token)
}

// MockManagerWithTTL is a mock of ManagerWithTTL interface.
type MockManagerWithTTL[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockManagerWithTTLMockRecorder[T]
	isgomock struct{}
}

// MockManagerWithTTLMockRecorder is the mock recorder for MockManagerWithTTL.
type MockManagerWithTTLMockRecorder[T any] struct {
	mock *MockManagerWithTTL[T]
}

// NewMockManagerWithTTL creates a new mock instance.
func NewMockManagerWithTTL[T any](ctrl *gomock.Controller) *MockManagerWithTTL[T] {
	mock := &MockManagerWithTTL[T]{ctrl: ctrl}
	mock.recorder = &MockManagerWithTTLMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerWithTTL[T]) EXPECT() *MockManagerWithTTLMockRecorder[T] {
	return m.recorder
}

// CreateTokenString mocks base method.
func (m *MockManagerWithTTL[T]) CreateTokenString(data T) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokenString", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTokenString indicates an expected call of CreateTokenString.
func (mr *MockManagerWithTTLMockRecorder[T]) CreateTokenString(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenString", reflect.TypeOf((*MockManagerWithTTL[T])(nil).CreateTokenString), data)
}

// ParseTokenString mocks base method.
func (m *MockManagerWithTTL[T]) ParseTokenString(token string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTokenString", token)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTokenString indicates an expected call of ParseTokenString.
func (mr *MockManagerWithTTLMockRecorder[T]) ParseTokenString(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTokenString", reflect.TypeOf((*MockManagerWithTTL[T])(nil).ParseTokenString), token)
}

// TTL mocks base method.
func (m *MockManagerWithTTL[T]) TTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TTL indicates an expected call of TTL.
func (mr *MockManagerWithTTLMockRecorder[T]) TTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockManagerWithTTL[T])(nil).TTL))
}
