// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/service (interfaces: TeamService)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_team.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/service TeamService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/hexley21/soccer-manager/internal/soccer-manager/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamService is a mock of TeamService interface.
type MockTeamService struct {
	ctrl     *gomock.Controller
	recorder *MockTeamServiceMockRecorder
	isgomock struct{}
}

// MockTeamServiceMockRecorder is the mock recorder for MockTeamService.
type MockTeamServiceMockRecorder struct {
	mock *MockTeamService
}

// NewMockTeamService creates a new mock instance.
func NewMockTeamService(ctrl *gomock.Controller) *MockTeamService {
	mock := &MockTeamService{ctrl: ctrl}
	mock.recorder = &MockTeamServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamService) EXPECT() *MockTeamServiceMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method.
func (m *MockTeamService) CreateTeam(ctx context.Context, userId int64, name string, countryCode domain.CountryCode, budget int64) (domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, userId, name, countryCode, budget)
	ret0, _ := ret[0].(domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockTeamServiceMockRecorder) CreateTeam(ctx, userId, name, countryCode, budget any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockTeamService)(nil).CreateTeam), ctx, userId, name, countryCode, budget)
}

// CreateTeamTranslation mocks base method.
func (m *MockTeamService) CreateTeamTranslation(ctx context.Context, locale domain.LocaleCode, userID int64, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeamTranslation", ctx, locale, userID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeamTranslation indicates an expected call of CreateTeamTranslation.
func (mr *MockTeamServiceMockRecorder) CreateTeamTranslation(ctx, locale, userID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeamTranslation", reflect.TypeOf((*MockTeamService)(nil).CreateTeamTranslation), ctx, locale, userID, name)
}

// DeleteTeamTranslation mocks base method.
func (m *MockTeamService) DeleteTeamTranslation(ctx context.Context, locale domain.LocaleCode, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamTranslation", ctx, locale, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamTranslation indicates an expected call of DeleteTeamTranslation.
func (mr *MockTeamServiceMockRecorder) DeleteTeamTranslation(ctx, locale, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamTranslation", reflect.TypeOf((*MockTeamService)(nil).DeleteTeamTranslation), ctx, locale, userID)
}

// GetAvailableLocales mocks base method.
func (m *MockTeamService) GetAvailableLocales(ctx context.Context, teamID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableLocales", ctx, teamID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableLocales indicates an expected call of GetAvailableLocales.
func (mr *MockTeamServiceMockRecorder) GetAvailableLocales(ctx, teamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableLocales", reflect.TypeOf((*MockTeamService)(nil).GetAvailableLocales), ctx, teamID)
}

// GetTeamById mocks base method.
func (m *MockTeamService) GetTeamById(ctx context.Context, locale domain.LocaleCode, id int64) (domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamById", ctx, locale, id)
	ret0, _ := ret[0].(domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamById indicates an expected call of GetTeamById.
func (mr *MockTeamServiceMockRecorder) GetTeamById(ctx, locale, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamById", reflect.TypeOf((*MockTeamService)(nil).GetTeamById), ctx, locale, id)
}

// GetTeamByUserId mocks base method.
func (m *MockTeamService) GetTeamByUserId(ctx context.Context, locale domain.LocaleCode, id int64) (domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByUserId", ctx, locale, id)
	ret0, _ := ret[0].(domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamByUserId indicates an expected call of GetTeamByUserId.
func (mr *MockTeamServiceMockRecorder) GetTeamByUserId(ctx, locale, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByUserId", reflect.TypeOf((*MockTeamService)(nil).GetTeamByUserId), ctx, locale, id)
}

// GetTeamTranslations mocks base method.
func (m *MockTeamService) GetTeamTranslations(ctx context.Context, userID int64) (domain.TeamTranslation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamTranslations", ctx, userID)
	ret0, _ := ret[0].(domain.TeamTranslation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamTranslations indicates an expected call of GetTeamTranslations.
func (mr *MockTeamServiceMockRecorder) GetTeamTranslations(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamTranslations", reflect.TypeOf((*MockTeamService)(nil).GetTeamTranslations), ctx, userID)
}

// GetTeams mocks base method.
func (m *MockTeamService) GetTeams(ctx context.Context, locale domain.LocaleCode, cursor int64, limit int32) ([]domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx, locale, cursor, limit)
	ret0, _ := ret[0].([]domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockTeamServiceMockRecorder) GetTeams(ctx, locale, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockTeamService)(nil).GetTeams), ctx, locale, cursor, limit)
}

// UpdateTeamCountry mocks base method.
func (m *MockTeamService) UpdateTeamCountry(ctx context.Context, userId int64, name string, countryCode domain.CountryCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamCountry", ctx, userId, name, countryCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeamCountry indicates an expected call of UpdateTeamCountry.
func (mr *MockTeamServiceMockRecorder) UpdateTeamCountry(ctx, userId, name, countryCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamCountry", reflect.TypeOf((*MockTeamService)(nil).UpdateTeamCountry), ctx, userId, name, countryCode)
}

// UpdateTeamTranslation mocks base method.
func (m *MockTeamService) UpdateTeamTranslation(ctx context.Context, locale domain.LocaleCode, userID int64, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeamTranslation", ctx, locale, userID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeamTranslation indicates an expected call of UpdateTeamTranslation.
func (mr *MockTeamServiceMockRecorder) UpdateTeamTranslation(ctx, locale, userID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeamTranslation", reflect.TypeOf((*MockTeamService)(nil).UpdateTeamTranslation), ctx, locale, userID, name)
}
