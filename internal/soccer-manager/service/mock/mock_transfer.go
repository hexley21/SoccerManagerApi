// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/service (interfaces: TransferService)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_transfer.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/service TransferService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/hexley21/soccer-manager/internal/soccer-manager/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTransferService is a mock of TransferService interface.
type MockTransferService struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceMockRecorder
	isgomock struct{}
}

// MockTransferServiceMockRecorder is the mock recorder for MockTransferService.
type MockTransferServiceMockRecorder struct {
	mock *MockTransferService
}

// NewMockTransferService creates a new mock instance.
func NewMockTransferService(ctrl *gomock.Controller) *MockTransferService {
	mock := &MockTransferService{ctrl: ctrl}
	mock.recorder = &MockTransferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferService) EXPECT() *MockTransferServiceMockRecorder {
	return m.recorder
}

// BuyPlayer mocks base method.
func (m *MockTransferService) BuyPlayer(ctx context.Context, transferId, buyerTeamId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyPlayer", ctx, transferId, buyerTeamId)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyPlayer indicates an expected call of BuyPlayer.
func (mr *MockTransferServiceMockRecorder) BuyPlayer(ctx, transferId, buyerTeamId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyPlayer", reflect.TypeOf((*MockTransferService)(nil).BuyPlayer), ctx, transferId, buyerTeamId)
}

// CreateTransfer mocks base method.
func (m *MockTransferService) CreateTransfer(ctx context.Context, userID, playerID, price int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", ctx, userID, playerID, price)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockTransferServiceMockRecorder) CreateTransfer(ctx, userID, playerID, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockTransferService)(nil).CreateTransfer), ctx, userID, playerID, price)
}

// DeleteTransfer mocks base method.
func (m *MockTransferService) DeleteTransfer(ctx context.Context, id, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransfer", ctx, id, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransfer indicates an expected call of DeleteTransfer.
func (mr *MockTransferServiceMockRecorder) DeleteTransfer(ctx, id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransfer", reflect.TypeOf((*MockTransferService)(nil).DeleteTransfer), ctx, id, userId)
}

// GetTransferByID mocks base method.
func (m *MockTransferService) GetTransferByID(ctx context.Context, transferID int64) (domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferByID", ctx, transferID)
	ret0, _ := ret[0].(domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferByID indicates an expected call of GetTransferByID.
func (mr *MockTransferServiceMockRecorder) GetTransferByID(ctx, transferID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferByID", reflect.TypeOf((*MockTransferService)(nil).GetTransferByID), ctx, transferID)
}

// GetTransferByPlayerID mocks base method.
func (m *MockTransferService) GetTransferByPlayerID(ctx context.Context, playerID int64) (domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferByPlayerID", ctx, playerID)
	ret0, _ := ret[0].(domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferByPlayerID indicates an expected call of GetTransferByPlayerID.
func (mr *MockTransferServiceMockRecorder) GetTransferByPlayerID(ctx, playerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferByPlayerID", reflect.TypeOf((*MockTransferService)(nil).GetTransferByPlayerID), ctx, playerID)
}

// ListTransfers mocks base method.
func (m *MockTransferService) ListTransfers(ctx context.Context, id int64, limit int32) ([]domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", ctx, id, limit)
	ret0, _ := ret[0].([]domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockTransferServiceMockRecorder) ListTransfers(ctx, id, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockTransferService)(nil).ListTransfers), ctx, id, limit)
}

// ListTransfersByTeamId mocks base method.
func (m *MockTransferService) ListTransfersByTeamId(ctx context.Context, sellerTeamID, id int64, limit int32) ([]domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfersByTeamId", ctx, sellerTeamID, id, limit)
	ret0, _ := ret[0].([]domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfersByTeamId indicates an expected call of ListTransfersByTeamId.
func (mr *MockTransferServiceMockRecorder) ListTransfersByTeamId(ctx, sellerTeamID, id, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfersByTeamId", reflect.TypeOf((*MockTransferService)(nil).ListTransfersByTeamId), ctx, sellerTeamID, id, limit)
}

// UpdateTransferPrice mocks base method.
func (m *MockTransferService) UpdateTransferPrice(ctx context.Context, ID, userId, price int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransferPrice", ctx, ID, userId, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransferPrice indicates an expected call of UpdateTransferPrice.
func (mr *MockTransferServiceMockRecorder) UpdateTransferPrice(ctx, ID, userId, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransferPrice", reflect.TypeOf((*MockTransferService)(nil).UpdateTransferPrice), ctx, ID, userId, price)
}
