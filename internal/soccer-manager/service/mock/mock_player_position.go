// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/service (interfaces: PlayerPositionService)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_player_position.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/service PlayerPositionService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/hexley21/soccer-manager/internal/soccer-manager/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockPlayerPositionService is a mock of PlayerPositionService interface.
type MockPlayerPositionService struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerPositionServiceMockRecorder
	isgomock struct{}
}

// MockPlayerPositionServiceMockRecorder is the mock recorder for MockPlayerPositionService.
type MockPlayerPositionServiceMockRecorder struct {
	mock *MockPlayerPositionService
}

// NewMockPlayerPositionService creates a new mock instance.
func NewMockPlayerPositionService(ctrl *gomock.Controller) *MockPlayerPositionService {
	mock := &MockPlayerPositionService{ctrl: ctrl}
	mock.recorder = &MockPlayerPositionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerPositionService) EXPECT() *MockPlayerPositionServiceMockRecorder {
	return m.recorder
}

// CreateTranslation mocks base method.
func (m *MockPlayerPositionService) CreateTranslation(ctx context.Context, code domain.PlayerPositionCode, locale domain.LocaleCode, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTranslation", ctx, code, locale, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTranslation indicates an expected call of CreateTranslation.
func (mr *MockPlayerPositionServiceMockRecorder) CreateTranslation(ctx, code, locale, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTranslation", reflect.TypeOf((*MockPlayerPositionService)(nil).CreateTranslation), ctx, code, locale, label)
}

// DeleteTranslation mocks base method.
func (m *MockPlayerPositionService) DeleteTranslation(ctx context.Context, code domain.PlayerPositionCode, locale domain.LocaleCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTranslation", ctx, code, locale)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTranslation indicates an expected call of DeleteTranslation.
func (mr *MockPlayerPositionServiceMockRecorder) DeleteTranslation(ctx, code, locale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTranslation", reflect.TypeOf((*MockPlayerPositionService)(nil).DeleteTranslation), ctx, code, locale)
}

// ListPositionCodes mocks base method.
func (m *MockPlayerPositionService) ListPositionCodes(ctx context.Context) ([]domain.PlayerPositionCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPositionCodes", ctx)
	ret0, _ := ret[0].([]domain.PlayerPositionCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPositionCodes indicates an expected call of ListPositionCodes.
func (mr *MockPlayerPositionServiceMockRecorder) ListPositionCodes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPositionCodes", reflect.TypeOf((*MockPlayerPositionService)(nil).ListPositionCodes), ctx)
}

// ListPositionTranslations mocks base method.
func (m *MockPlayerPositionService) ListPositionTranslations(ctx context.Context) ([]domain.PlayerPositionWithLocale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPositionTranslations", ctx)
	ret0, _ := ret[0].([]domain.PlayerPositionWithLocale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPositionTranslations indicates an expected call of ListPositionTranslations.
func (mr *MockPlayerPositionServiceMockRecorder) ListPositionTranslations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPositionTranslations", reflect.TypeOf((*MockPlayerPositionService)(nil).ListPositionTranslations), ctx)
}

// ListPositionTranslationsByCode mocks base method.
func (m *MockPlayerPositionService) ListPositionTranslationsByCode(ctx context.Context, code domain.PlayerPositionCode) ([]domain.PlayerPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPositionTranslationsByCode", ctx, code)
	ret0, _ := ret[0].([]domain.PlayerPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPositionTranslationsByCode indicates an expected call of ListPositionTranslationsByCode.
func (mr *MockPlayerPositionServiceMockRecorder) ListPositionTranslationsByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPositionTranslationsByCode", reflect.TypeOf((*MockPlayerPositionService)(nil).ListPositionTranslationsByCode), ctx, code)
}

// ListPositionTranslationsByLocale mocks base method.
func (m *MockPlayerPositionService) ListPositionTranslationsByLocale(ctx context.Context, locale domain.LocaleCode) ([]domain.PlayerPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPositionTranslationsByLocale", ctx, locale)
	ret0, _ := ret[0].([]domain.PlayerPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPositionTranslationsByLocale indicates an expected call of ListPositionTranslationsByLocale.
func (mr *MockPlayerPositionServiceMockRecorder) ListPositionTranslationsByLocale(ctx, locale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPositionTranslationsByLocale", reflect.TypeOf((*MockPlayerPositionService)(nil).ListPositionTranslationsByLocale), ctx, locale)
}

// ListPositions mocks base method.
func (m *MockPlayerPositionService) ListPositions(ctx context.Context) ([]domain.PlayerPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPositions", ctx)
	ret0, _ := ret[0].([]domain.PlayerPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPositions indicates an expected call of ListPositions.
func (mr *MockPlayerPositionServiceMockRecorder) ListPositions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPositions", reflect.TypeOf((*MockPlayerPositionService)(nil).ListPositions), ctx)
}

// UpdateTranslation mocks base method.
func (m *MockPlayerPositionService) UpdateTranslation(ctx context.Context, code domain.PlayerPositionCode, locale domain.LocaleCode, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTranslation", ctx, code, locale, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTranslation indicates an expected call of UpdateTranslation.
func (mr *MockPlayerPositionServiceMockRecorder) UpdateTranslation(ctx, code, locale, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTranslation", reflect.TypeOf((*MockPlayerPositionService)(nil).UpdateTranslation), ctx, code, locale, label)
}
