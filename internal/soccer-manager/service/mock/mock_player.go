// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hexley21/soccer-manager/internal/soccer-manager/service (interfaces: PlayerService)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_player.go -package=mock github.com/hexley21/soccer-manager/internal/soccer-manager/service PlayerService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/hexley21/soccer-manager/internal/soccer-manager/domain"
	service "github.com/hexley21/soccer-manager/internal/soccer-manager/service"
	gomock "go.uber.org/mock/gomock"
)

// MockPlayerService is a mock of PlayerService interface.
type MockPlayerService struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerServiceMockRecorder
	isgomock struct{}
}

// MockPlayerServiceMockRecorder is the mock recorder for MockPlayerService.
type MockPlayerServiceMockRecorder struct {
	mock *MockPlayerService
}

// NewMockPlayerService creates a new mock instance.
func NewMockPlayerService(ctrl *gomock.Controller) *MockPlayerService {
	mock := &MockPlayerService{ctrl: ctrl}
	mock.recorder = &MockPlayerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerService) EXPECT() *MockPlayerServiceMockRecorder {
	return m.recorder
}

// CreatePlayer mocks base method.
func (m *MockPlayerService) CreatePlayer(ctx context.Context, arg service.CreatePlayerArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockPlayerServiceMockRecorder) CreatePlayer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockPlayerService)(nil).CreatePlayer), ctx, arg)
}

// CreatePlayersBatch mocks base method.
func (m *MockPlayerService) CreatePlayersBatch(ctx context.Context, args []service.CreatePlayerArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayersBatch", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePlayersBatch indicates an expected call of CreatePlayersBatch.
func (mr *MockPlayerServiceMockRecorder) CreatePlayersBatch(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayersBatch", reflect.TypeOf((*MockPlayerService)(nil).CreatePlayersBatch), ctx, args)
}

// GetAllPlayers mocks base method.
func (m *MockPlayerService) GetAllPlayers(ctx context.Context, cursor int64, limit int32) ([]domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlayers", ctx, cursor, limit)
	ret0, _ := ret[0].([]domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlayers indicates an expected call of GetAllPlayers.
func (mr *MockPlayerServiceMockRecorder) GetAllPlayers(ctx, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlayers", reflect.TypeOf((*MockPlayerService)(nil).GetAllPlayers), ctx, cursor, limit)
}

// GetPlayerById mocks base method.
func (m *MockPlayerService) GetPlayerById(ctx context.Context, playerID int64) (domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerById", ctx, playerID)
	ret0, _ := ret[0].(domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerById indicates an expected call of GetPlayerById.
func (mr *MockPlayerServiceMockRecorder) GetPlayerById(ctx, playerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerById", reflect.TypeOf((*MockPlayerService)(nil).GetPlayerById), ctx, playerID)
}

// GetPlayersByTeamId mocks base method.
func (m *MockPlayerService) GetPlayersByTeamId(ctx context.Context, teamId, cursor int64, limit int32) ([]domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersByTeamId", ctx, teamId, cursor, limit)
	ret0, _ := ret[0].([]domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayersByTeamId indicates an expected call of GetPlayersByTeamId.
func (mr *MockPlayerServiceMockRecorder) GetPlayersByTeamId(ctx, teamId, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersByTeamId", reflect.TypeOf((*MockPlayerService)(nil).GetPlayersByTeamId), ctx, teamId, cursor, limit)
}

// GetPlayersByUserId mocks base method.
func (m *MockPlayerService) GetPlayersByUserId(ctx context.Context, userId, cursor int64, limit int32) ([]domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayersByUserId", ctx, userId, cursor, limit)
	ret0, _ := ret[0].([]domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayersByUserId indicates an expected call of GetPlayersByUserId.
func (mr *MockPlayerServiceMockRecorder) GetPlayersByUserId(ctx, userId, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayersByUserId", reflect.TypeOf((*MockPlayerService)(nil).GetPlayersByUserId), ctx, userId, cursor, limit)
}

// UpdatePlayerData mocks base method.
func (m *MockPlayerService) UpdatePlayerData(ctx context.Context, userId, playerID int64, firstName, lastName string, countryCode domain.CountryCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayerData", ctx, userId, playerID, firstName, lastName, countryCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayerData indicates an expected call of UpdatePlayerData.
func (mr *MockPlayerServiceMockRecorder) UpdatePlayerData(ctx, userId, playerID, firstName, lastName, countryCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayerData", reflect.TypeOf((*MockPlayerService)(nil).UpdatePlayerData), ctx, userId, playerID, firstName, lastName, countryCode)
}
